/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

#import "AutoAngelSvcGen.h"

@implementation LocationInfo

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"LocationInfo"

@synthesize latIsSet;
- (NSString *)getLat
{
    return lat;
}

- (void)setLat:(NSString *)_lat
{
    lat = _lat;
    latIsSet = (_lat != nil) ? YES : NO;
}

@synthesize lonIsSet;
- (NSString *)getLon
{
    return lon;
}

- (void)setLon:(NSString *)_lon
{
    lon = _lon;
    lonIsSet = (_lon != nil) ? YES : NO;
}

@synthesize timeIsSet;
- (NSString *)getTime
{
    return time;
}

- (void)setTime:(NSString *)_time
{
    time = _time;
    timeIsSet = (_time != nil) ? YES : NO;
}


+ (LocationInfo *)deserialiseFromString: (NSString *)string
{
    return [LocationInfo deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (LocationInfo *)deserialiseFromPayload: (GolgiPayload *)payload
{
    LocationInfo *inst = [[LocationInfo alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            [inst setLat:str];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"2:"]) != nil){
            [inst setLon:str];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"3:"]) != nil){
            [inst setTime:str];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (LocationInfo *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [LocationInfo fromJSONString:jsonString error:&_localErr];
}

+ (LocationInfo *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [LocationInfo fromJSONObject:gjo error:err];
    }
}

+ (LocationInfo *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [LocationInfo fromJSONObject:jsonObj error:&_localErr];
}

+ (LocationInfo *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    LocationInfo *inst = [[LocationInfo alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"lat" error:_err]) != nil){
            [inst setLat:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'lat' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'lat' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"lon" error:_err]) != nil){
            [inst setLon:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'lon' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'lon' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"time" error:_err]) != nil){
            [inst setTime:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'time' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'time' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(latIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"lat"], [CSL encodeJSString:lat]];
        _comma = @",";
    }
    if(lonIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"lon"], [CSL encodeJSString:lon]];
        _comma = @",";
    }
    if(timeIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"time"], [CSL encodeJSString:time]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(latIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:lat]];
    }
    if(lonIsSet){
        [_str appendFormat:@"%@2: \"%@\"\n", prefix, [CSL  NTLEscapeString:lon]];
    }
    if(timeIsSet){
        [_str appendFormat:@"%@3: \"%@\"\n", prefix, [CSL  NTLEscapeString:time]];
    }

    return [NSString stringWithString:_str];
}

- (LocationInfo *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        lat = @"";
        latIsSet = defIsSet;
        lon = @"";
        lonIsSet = defIsSet;
        time = @"";
        timeIsSet = defIsSet;
    }

    return self;

}

@end
@implementation autoangel_crashInfo_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"autoangel_crashInfo_reqArg"

@synthesize locationInfoIsSet;
- (LocationInfo *)getLocationInfo
{
    return locationInfo;
}

- (void)setLocationInfo:(LocationInfo *)_locationInfo
{
    locationInfo = _locationInfo;
    locationInfoIsSet = (_locationInfo != nil) ? YES : NO;
}

@synthesize crashTextIsSet;
- (NSString *)getCrashText
{
    return crashText;
}

- (void)setCrashText:(NSString *)_crashText
{
    crashText = _crashText;
    crashTextIsSet = (_crashText != nil) ? YES : NO;
}


+ (autoangel_crashInfo_reqArg *)deserialiseFromString: (NSString *)string
{
    return [autoangel_crashInfo_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (autoangel_crashInfo_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    autoangel_crashInfo_reqArg *inst = [[autoangel_crashInfo_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setLocationInfo:[LocationInfo deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setLocationInfo:nil];
        }
    }
    if([inst getLocationInfo] == nil){
        corrupt = YES;
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"2:"]) != nil){
            [inst setCrashText:str];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (autoangel_crashInfo_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [autoangel_crashInfo_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (autoangel_crashInfo_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [autoangel_crashInfo_reqArg fromJSONObject:gjo error:err];
    }
}

+ (autoangel_crashInfo_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [autoangel_crashInfo_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (autoangel_crashInfo_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    autoangel_crashInfo_reqArg *inst = [[autoangel_crashInfo_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        LocationInfo *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"locationInfo" error:_err]) != nil){
            if((_objInst = [LocationInfo fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'locationInfo' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'locationInfo' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.locationInfo = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'locationInfo' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"crashText" error:_err]) != nil){
            [inst setCrashText:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'crashText' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'crashText' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(locationInfoIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"locationInfo"], [locationInfo toJSON]];
        _comma = @",";
    }
    if(crashTextIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"crashText"], [CSL encodeJSString:crashText]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(locationInfoIsSet){
        [_str appendString:[locationInfo serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }
    if(crashTextIsSet){
        [_str appendFormat:@"%@2: \"%@\"\n", prefix, [CSL  NTLEscapeString:crashText]];
    }

    return [NSString stringWithString:_str];
}

- (autoangel_crashInfo_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        locationInfo = [[LocationInfo alloc] initWithIsSet:defIsSet];
        locationInfoIsSet = defIsSet;
        crashText = @"";
        crashTextIsSet = defIsSet;
    }

    return self;

}

@end
@implementation autoangel_crashInfo_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"autoangel_crashInfo_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (autoangel_crashInfo_rspArg *)deserialiseFromString: (NSString *)string
{
    return [autoangel_crashInfo_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (autoangel_crashInfo_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    autoangel_crashInfo_rspArg *inst = [[autoangel_crashInfo_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (autoangel_crashInfo_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [autoangel_crashInfo_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (autoangel_crashInfo_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [autoangel_crashInfo_rspArg fromJSONObject:gjo error:err];
    }
}

+ (autoangel_crashInfo_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [autoangel_crashInfo_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (autoangel_crashInfo_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    autoangel_crashInfo_rspArg *inst = [[autoangel_crashInfo_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (autoangel_crashInfo_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation autoangelCrashInfoExceptionBundle
@synthesize golgiException;
- (autoangelCrashInfoExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface CrashInfoInternalResultSender : NSObject <autoangelCrashInfoResultSender>
{
    NSString *sender;
    NSString *msgId;
    autoangel_crashInfo_rspArg *rsp;
}
- (CrashInfoInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation CrashInfoInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (CrashInfoInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[autoangel_crashInfo_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"crashInfo.autoangel" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface CrashInfoInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<autoangelCrashInfoRequestReceiver> receiver;
    void (^userHandler)(id<autoangelCrashInfoResultSender> resultSender, LocationInfo * locationInfo, NSString * crashText);
}

- (CrashInfoInternalRequestHandler *)initWithReceiver:(id<autoangelCrashInfoRequestReceiver>)receiver;
- (CrashInfoInternalRequestHandler *)initWithHandler:(void (^)(id<autoangelCrashInfoResultSender> resultSender, LocationInfo * locationInfo, NSString * crashText))userHandler;
@end

@implementation CrashInfoInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    autoangel_crashInfo_reqArg *req = [autoangel_crashInfo_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"crashInfo.autoangel" withMessageId:msgId];
    }
    else{
        // Process req here
        CrashInfoInternalResultSender *resultSender;
        resultSender = [CrashInfoInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver crashInfoWithResultSender:resultSender andLocationInfo:[req getLocationInfo] andCrashText:[req getCrashText]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getLocationInfo], [req getCrashText]);    }
    }
}

- (CrashInfoInternalRequestHandler *)initWithReceiver:(id<autoangelCrashInfoRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (CrashInfoInternalRequestHandler *)initWithHandler:(void (^)(id<autoangelCrashInfoResultSender> resultSender, LocationInfo * locationInfo, NSString * crashText))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface CrashInfoInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<autoangelCrashInfoResultReceiver> receiver;
    void (^handler)(autoangelCrashInfoExceptionBundle *exceptionBundle);
}

- (CrashInfoInternalResponseHandler *)initWithReceiver:(id<autoangelCrashInfoResultReceiver>)receiver orHandler:(void (^)(autoangelCrashInfoExceptionBundle *exceptionBundle))handler;
@end
@implementation CrashInfoInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    autoangel_crashInfo_rspArg *rsp = [autoangel_crashInfo_rspArg deserialiseFromString:payload];
    autoangelCrashInfoExceptionBundle *exBundle = [[autoangelCrashInfoExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'crashInfo' in Golgi Service 'autoangel' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (CrashInfoInternalResponseHandler *)initWithReceiver:(id<autoangelCrashInfoResultReceiver>)_receiver orHandler:(void (^)(autoangelCrashInfoExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end



/********************************************************/
/********************************************************/
/********************************************************/


@implementation autoangelSvc
//
// crashInfo
//
+ (void)sendCrashInfoUsingResultHandler:(void (^)(autoangelCrashInfoExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withLocationInfo:(LocationInfo *)locationInfo andCrashText:(NSString *)crashText
{
    [self sendCrashInfoUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withLocationInfo:locationInfo andCrashText:crashText];
}

+ (void)sendCrashInfoUsingResultHandler:(void (^)(autoangelCrashInfoExceptionBundle *))resultHandler andDestination:(NSString *)_dst withLocationInfo:(LocationInfo *)locationInfo andCrashText:(NSString *)crashText
{
    [self sendCrashInfoUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withLocationInfo:locationInfo andCrashText:crashText];
}

+ (void)sendCrashInfoUsingResultReceiver:(id<autoangelCrashInfoResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withLocationInfo:(LocationInfo *)locationInfo andCrashText:(NSString *)crashText
{
    [self sendCrashInfoUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withLocationInfo:locationInfo andCrashText:crashText];
}

+ (void)sendCrashInfoUsingResultReceiver:(id<autoangelCrashInfoResultReceiver>)resultReceiver andDestination:(NSString *)_dst withLocationInfo:(LocationInfo *)locationInfo andCrashText:(NSString *)crashText
{
    [self sendCrashInfoUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withLocationInfo:locationInfo andCrashText:crashText];
}

//
// crashInfo with transport options and receiver/handler
//
+ (void)sendCrashInfoUsingResultReceiver:(id<autoangelCrashInfoResultReceiver>)resultReceiver orResultHandler:(void (^)(autoangelCrashInfoExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withLocationInfo:(LocationInfo *)locationInfo andCrashText:(NSString *)crashText
{
    NSString *_payload;
    autoangel_crashInfo_reqArg *_reqArg = [[autoangel_crashInfo_reqArg alloc] init];
    CrashInfoInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [CrashInfoInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setLocationInfo:locationInfo];
    [_reqArg setCrashText:crashText];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"crashInfo.autoangel" andResponseHandler:_iRspHndlr];

}

//
// crashInfo using closure
//
// + (void)sendCrashInfoUsingResultHandler:(void (^)(autoangelCrashInfoExceptionBundle *))resultHandler andDestination:(NSString *)_dst withLocationInfo:(LocationInfo *)locationInfo andCrashText:(NSString *)crashText

+ (void)registerCrashInfoRequestReceiver:(id<autoangelCrashInfoRequestReceiver>)requestReceiver
{
    CrashInfoInternalRequestHandler *reqHandler;
    reqHandler = [CrashInfoInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"crashInfo.autoangel"];
}

+ (void)registerCrashInfoRequestHandler:(void (^)(id<autoangelCrashInfoResultSender> resultSender, LocationInfo * locationInfo, NSString * crashText))requestHandler;
{
    CrashInfoInternalRequestHandler *reqHandler;
    reqHandler = [CrashInfoInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"crashInfo.autoangel"];
}

@end
@implementation Temp

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"Temp"

@synthesize valueIsSet;
- (NSInteger)getValue
{
    return value;
}

- (void)setValue:(NSInteger )_value
{
    value = _value;
    valueIsSet = YES;
}


+ (Temp *)deserialiseFromString: (NSString *)string
{
    return [Temp deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (Temp *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Temp *inst = [[Temp alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.value = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (Temp *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [Temp fromJSONString:jsonString error:&_localErr];
}

+ (Temp *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [Temp fromJSONObject:gjo error:err];
    }
}

+ (Temp *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [Temp fromJSONObject:jsonObj error:&_localErr];
}

+ (Temp *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    Temp *inst = [[Temp alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"value" error:_err]) != nil){
            inst.value = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'value' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'value' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(valueIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"value"], (long)value];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(valueIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)value];
    }

    return [NSString stringWithString:_str];
}

- (Temp *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        valueIsSet = defIsSet;
    }

    return self;

}

@end
@implementation Led

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"Led"

@synthesize valueIsSet;
- (NSInteger)getValue
{
    return value;
}

- (void)setValue:(NSInteger )_value
{
    value = _value;
    valueIsSet = YES;
}


+ (Led *)deserialiseFromString: (NSString *)string
{
    return [Led deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (Led *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Led *inst = [[Led alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.value = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (Led *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [Led fromJSONString:jsonString error:&_localErr];
}

+ (Led *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [Led fromJSONObject:gjo error:err];
    }
}

+ (Led *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [Led fromJSONObject:jsonObj error:&_localErr];
}

+ (Led *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    Led *inst = [[Led alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"value" error:_err]) != nil){
            inst.value = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'value' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'value' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(valueIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"value"], (long)value];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(valueIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)value];
    }

    return [NSString stringWithString:_str];
}

- (Led *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        valueIsSet = defIsSet;
    }

    return self;

}

@end
@implementation Demo_setLed_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"Demo_setLed_reqArg"

@synthesize ledIsSet;
- (Led *)getLed
{
    return led;
}

- (void)setLed:(Led *)_led
{
    led = _led;
    ledIsSet = (_led != nil) ? YES : NO;
}


+ (Demo_setLed_reqArg *)deserialiseFromString: (NSString *)string
{
    return [Demo_setLed_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (Demo_setLed_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Demo_setLed_reqArg *inst = [[Demo_setLed_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setLed:[Led deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setLed:nil];
        }
    }
    if([inst getLed] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (Demo_setLed_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [Demo_setLed_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (Demo_setLed_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [Demo_setLed_reqArg fromJSONObject:gjo error:err];
    }
}

+ (Demo_setLed_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [Demo_setLed_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (Demo_setLed_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    Demo_setLed_reqArg *inst = [[Demo_setLed_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        Led *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"led" error:_err]) != nil){
            if((_objInst = [Led fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'led' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'led' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.led = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'led' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(ledIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"led"], [led toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(ledIsSet){
        [_str appendString:[led serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (Demo_setLed_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        led = [[Led alloc] initWithIsSet:defIsSet];
        ledIsSet = defIsSet;
    }

    return self;

}

@end
@implementation Demo_setLed_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"Demo_setLed_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (Demo_setLed_rspArg *)deserialiseFromString: (NSString *)string
{
    return [Demo_setLed_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (Demo_setLed_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Demo_setLed_rspArg *inst = [[Demo_setLed_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (Demo_setLed_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [Demo_setLed_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (Demo_setLed_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [Demo_setLed_rspArg fromJSONObject:gjo error:err];
    }
}

+ (Demo_setLed_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [Demo_setLed_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (Demo_setLed_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    Demo_setLed_rspArg *inst = [[Demo_setLed_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (Demo_setLed_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation Demo_setThermostatTemp_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"Demo_setThermostatTemp_reqArg"

@synthesize tempIsSet;
- (Temp *)getTemp
{
    return temp;
}

- (void)setTemp:(Temp *)_temp
{
    temp = _temp;
    tempIsSet = (_temp != nil) ? YES : NO;
}


+ (Demo_setThermostatTemp_reqArg *)deserialiseFromString: (NSString *)string
{
    return [Demo_setThermostatTemp_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (Demo_setThermostatTemp_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Demo_setThermostatTemp_reqArg *inst = [[Demo_setThermostatTemp_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setTemp:[Temp deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setTemp:nil];
        }
    }
    if([inst getTemp] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (Demo_setThermostatTemp_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [Demo_setThermostatTemp_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (Demo_setThermostatTemp_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [Demo_setThermostatTemp_reqArg fromJSONObject:gjo error:err];
    }
}

+ (Demo_setThermostatTemp_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [Demo_setThermostatTemp_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (Demo_setThermostatTemp_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    Demo_setThermostatTemp_reqArg *inst = [[Demo_setThermostatTemp_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        Temp *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"temp" error:_err]) != nil){
            if((_objInst = [Temp fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'temp' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'temp' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.temp = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'temp' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(tempIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"temp"], [temp toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(tempIsSet){
        [_str appendString:[temp serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (Demo_setThermostatTemp_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        temp = [[Temp alloc] initWithIsSet:defIsSet];
        tempIsSet = defIsSet;
    }

    return self;

}

@end
@implementation Demo_setThermostatTemp_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"Demo_setThermostatTemp_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (Demo_setThermostatTemp_rspArg *)deserialiseFromString: (NSString *)string
{
    return [Demo_setThermostatTemp_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (Demo_setThermostatTemp_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Demo_setThermostatTemp_rspArg *inst = [[Demo_setThermostatTemp_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (Demo_setThermostatTemp_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [Demo_setThermostatTemp_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (Demo_setThermostatTemp_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [Demo_setThermostatTemp_rspArg fromJSONObject:gjo error:err];
    }
}

+ (Demo_setThermostatTemp_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [Demo_setThermostatTemp_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (Demo_setThermostatTemp_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    Demo_setThermostatTemp_rspArg *inst = [[Demo_setThermostatTemp_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (Demo_setThermostatTemp_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation Demo_reportTemp_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"Demo_reportTemp_reqArg"

@synthesize tempIsSet;
- (Temp *)getTemp
{
    return temp;
}

- (void)setTemp:(Temp *)_temp
{
    temp = _temp;
    tempIsSet = (_temp != nil) ? YES : NO;
}


+ (Demo_reportTemp_reqArg *)deserialiseFromString: (NSString *)string
{
    return [Demo_reportTemp_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (Demo_reportTemp_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Demo_reportTemp_reqArg *inst = [[Demo_reportTemp_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setTemp:[Temp deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setTemp:nil];
        }
    }
    if([inst getTemp] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (Demo_reportTemp_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [Demo_reportTemp_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (Demo_reportTemp_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [Demo_reportTemp_reqArg fromJSONObject:gjo error:err];
    }
}

+ (Demo_reportTemp_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [Demo_reportTemp_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (Demo_reportTemp_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    Demo_reportTemp_reqArg *inst = [[Demo_reportTemp_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        Temp *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"temp" error:_err]) != nil){
            if((_objInst = [Temp fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'temp' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'temp' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.temp = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'temp' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(tempIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"temp"], [temp toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(tempIsSet){
        [_str appendString:[temp serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (Demo_reportTemp_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        temp = [[Temp alloc] initWithIsSet:defIsSet];
        tempIsSet = defIsSet;
    }

    return self;

}

@end
@implementation Demo_reportTemp_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"Demo_reportTemp_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (Demo_reportTemp_rspArg *)deserialiseFromString: (NSString *)string
{
    return [Demo_reportTemp_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (Demo_reportTemp_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Demo_reportTemp_rspArg *inst = [[Demo_reportTemp_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (Demo_reportTemp_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [Demo_reportTemp_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (Demo_reportTemp_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [Demo_reportTemp_rspArg fromJSONObject:gjo error:err];
    }
}

+ (Demo_reportTemp_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [Demo_reportTemp_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (Demo_reportTemp_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    Demo_reportTemp_rspArg *inst = [[Demo_reportTemp_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (Demo_reportTemp_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation DemoSetLedExceptionBundle
@synthesize golgiException;
- (DemoSetLedExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface SetLedInternalResultSender : NSObject <DemoSetLedResultSender>
{
    NSString *sender;
    NSString *msgId;
    Demo_setLed_rspArg *rsp;
}
- (SetLedInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation SetLedInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (SetLedInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[Demo_setLed_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"setLed.Demo" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface SetLedInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<DemoSetLedRequestReceiver> receiver;
    void (^userHandler)(id<DemoSetLedResultSender> resultSender, Led * led);
}

- (SetLedInternalRequestHandler *)initWithReceiver:(id<DemoSetLedRequestReceiver>)receiver;
- (SetLedInternalRequestHandler *)initWithHandler:(void (^)(id<DemoSetLedResultSender> resultSender, Led * led))userHandler;
@end

@implementation SetLedInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    Demo_setLed_reqArg *req = [Demo_setLed_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"setLed.Demo" withMessageId:msgId];
    }
    else{
        // Process req here
        SetLedInternalResultSender *resultSender;
        resultSender = [SetLedInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver setLedWithResultSender:resultSender andLed:[req getLed]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getLed]);    }
    }
}

- (SetLedInternalRequestHandler *)initWithReceiver:(id<DemoSetLedRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (SetLedInternalRequestHandler *)initWithHandler:(void (^)(id<DemoSetLedResultSender> resultSender, Led * led))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface SetLedInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<DemoSetLedResultReceiver> receiver;
    void (^handler)(DemoSetLedExceptionBundle *exceptionBundle);
}

- (SetLedInternalResponseHandler *)initWithReceiver:(id<DemoSetLedResultReceiver>)receiver orHandler:(void (^)(DemoSetLedExceptionBundle *exceptionBundle))handler;
@end
@implementation SetLedInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    Demo_setLed_rspArg *rsp = [Demo_setLed_rspArg deserialiseFromString:payload];
    DemoSetLedExceptionBundle *exBundle = [[DemoSetLedExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'setLed' in Golgi Service 'Demo' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (SetLedInternalResponseHandler *)initWithReceiver:(id<DemoSetLedResultReceiver>)_receiver orHandler:(void (^)(DemoSetLedExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation DemoSetThermostatTempExceptionBundle
@synthesize golgiException;
- (DemoSetThermostatTempExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface SetThermostatTempInternalResultSender : NSObject <DemoSetThermostatTempResultSender>
{
    NSString *sender;
    NSString *msgId;
    Demo_setThermostatTemp_rspArg *rsp;
}
- (SetThermostatTempInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation SetThermostatTempInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (SetThermostatTempInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[Demo_setThermostatTemp_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"setThermostatTemp.Demo" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface SetThermostatTempInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<DemoSetThermostatTempRequestReceiver> receiver;
    void (^userHandler)(id<DemoSetThermostatTempResultSender> resultSender, Temp * temp);
}

- (SetThermostatTempInternalRequestHandler *)initWithReceiver:(id<DemoSetThermostatTempRequestReceiver>)receiver;
- (SetThermostatTempInternalRequestHandler *)initWithHandler:(void (^)(id<DemoSetThermostatTempResultSender> resultSender, Temp * temp))userHandler;
@end

@implementation SetThermostatTempInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    Demo_setThermostatTemp_reqArg *req = [Demo_setThermostatTemp_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"setThermostatTemp.Demo" withMessageId:msgId];
    }
    else{
        // Process req here
        SetThermostatTempInternalResultSender *resultSender;
        resultSender = [SetThermostatTempInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver setThermostatTempWithResultSender:resultSender andTemp:[req getTemp]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getTemp]);    }
    }
}

- (SetThermostatTempInternalRequestHandler *)initWithReceiver:(id<DemoSetThermostatTempRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (SetThermostatTempInternalRequestHandler *)initWithHandler:(void (^)(id<DemoSetThermostatTempResultSender> resultSender, Temp * temp))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface SetThermostatTempInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<DemoSetThermostatTempResultReceiver> receiver;
    void (^handler)(DemoSetThermostatTempExceptionBundle *exceptionBundle);
}

- (SetThermostatTempInternalResponseHandler *)initWithReceiver:(id<DemoSetThermostatTempResultReceiver>)receiver orHandler:(void (^)(DemoSetThermostatTempExceptionBundle *exceptionBundle))handler;
@end
@implementation SetThermostatTempInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    Demo_setThermostatTemp_rspArg *rsp = [Demo_setThermostatTemp_rspArg deserialiseFromString:payload];
    DemoSetThermostatTempExceptionBundle *exBundle = [[DemoSetThermostatTempExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'setThermostatTemp' in Golgi Service 'Demo' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (SetThermostatTempInternalResponseHandler *)initWithReceiver:(id<DemoSetThermostatTempResultReceiver>)_receiver orHandler:(void (^)(DemoSetThermostatTempExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation DemoReportTempExceptionBundle
@synthesize golgiException;
- (DemoReportTempExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface ReportTempInternalResultSender : NSObject <DemoReportTempResultSender>
{
    NSString *sender;
    NSString *msgId;
    Demo_reportTemp_rspArg *rsp;
}
- (ReportTempInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation ReportTempInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (ReportTempInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[Demo_reportTemp_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"reportTemp.Demo" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface ReportTempInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<DemoReportTempRequestReceiver> receiver;
    void (^userHandler)(id<DemoReportTempResultSender> resultSender, Temp * temp);
}

- (ReportTempInternalRequestHandler *)initWithReceiver:(id<DemoReportTempRequestReceiver>)receiver;
- (ReportTempInternalRequestHandler *)initWithHandler:(void (^)(id<DemoReportTempResultSender> resultSender, Temp * temp))userHandler;
@end

@implementation ReportTempInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    Demo_reportTemp_reqArg *req = [Demo_reportTemp_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"reportTemp.Demo" withMessageId:msgId];
    }
    else{
        // Process req here
        ReportTempInternalResultSender *resultSender;
        resultSender = [ReportTempInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver reportTempWithResultSender:resultSender andTemp:[req getTemp]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getTemp]);    }
    }
}

- (ReportTempInternalRequestHandler *)initWithReceiver:(id<DemoReportTempRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (ReportTempInternalRequestHandler *)initWithHandler:(void (^)(id<DemoReportTempResultSender> resultSender, Temp * temp))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface ReportTempInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<DemoReportTempResultReceiver> receiver;
    void (^handler)(DemoReportTempExceptionBundle *exceptionBundle);
}

- (ReportTempInternalResponseHandler *)initWithReceiver:(id<DemoReportTempResultReceiver>)receiver orHandler:(void (^)(DemoReportTempExceptionBundle *exceptionBundle))handler;
@end
@implementation ReportTempInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    Demo_reportTemp_rspArg *rsp = [Demo_reportTemp_rspArg deserialiseFromString:payload];
    DemoReportTempExceptionBundle *exBundle = [[DemoReportTempExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'reportTemp' in Golgi Service 'Demo' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (ReportTempInternalResponseHandler *)initWithReceiver:(id<DemoReportTempResultReceiver>)_receiver orHandler:(void (^)(DemoReportTempExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end



/********************************************************/
/********************************************************/
/********************************************************/


@implementation DemoSvc
//
// setLed
//
+ (void)sendSetLedUsingResultHandler:(void (^)(DemoSetLedExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withLed:(Led *)led
{
    [self sendSetLedUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withLed:led];
}

+ (void)sendSetLedUsingResultHandler:(void (^)(DemoSetLedExceptionBundle *))resultHandler andDestination:(NSString *)_dst withLed:(Led *)led
{
    [self sendSetLedUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withLed:led];
}

+ (void)sendSetLedUsingResultReceiver:(id<DemoSetLedResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withLed:(Led *)led
{
    [self sendSetLedUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withLed:led];
}

+ (void)sendSetLedUsingResultReceiver:(id<DemoSetLedResultReceiver>)resultReceiver andDestination:(NSString *)_dst withLed:(Led *)led
{
    [self sendSetLedUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withLed:led];
}

//
// setLed with transport options and receiver/handler
//
+ (void)sendSetLedUsingResultReceiver:(id<DemoSetLedResultReceiver>)resultReceiver orResultHandler:(void (^)(DemoSetLedExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withLed:(Led *)led
{
    NSString *_payload;
    Demo_setLed_reqArg *_reqArg = [[Demo_setLed_reqArg alloc] init];
    SetLedInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [SetLedInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setLed:led];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"setLed.Demo" andResponseHandler:_iRspHndlr];

}

//
// setLed using closure
//
// + (void)sendSetLedUsingResultHandler:(void (^)(DemoSetLedExceptionBundle *))resultHandler andDestination:(NSString *)_dst withLed:(Led *)led

+ (void)registerSetLedRequestReceiver:(id<DemoSetLedRequestReceiver>)requestReceiver
{
    SetLedInternalRequestHandler *reqHandler;
    reqHandler = [SetLedInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setLed.Demo"];
}

+ (void)registerSetLedRequestHandler:(void (^)(id<DemoSetLedResultSender> resultSender, Led * led))requestHandler;
{
    SetLedInternalRequestHandler *reqHandler;
    reqHandler = [SetLedInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setLed.Demo"];
}

//
// setThermostatTemp
//
+ (void)sendSetThermostatTempUsingResultHandler:(void (^)(DemoSetThermostatTempExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    [self sendSetThermostatTempUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withTemp:temp];
}

+ (void)sendSetThermostatTempUsingResultHandler:(void (^)(DemoSetThermostatTempExceptionBundle *))resultHandler andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    [self sendSetThermostatTempUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withTemp:temp];
}

+ (void)sendSetThermostatTempUsingResultReceiver:(id<DemoSetThermostatTempResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    [self sendSetThermostatTempUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withTemp:temp];
}

+ (void)sendSetThermostatTempUsingResultReceiver:(id<DemoSetThermostatTempResultReceiver>)resultReceiver andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    [self sendSetThermostatTempUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withTemp:temp];
}

//
// setThermostatTemp with transport options and receiver/handler
//
+ (void)sendSetThermostatTempUsingResultReceiver:(id<DemoSetThermostatTempResultReceiver>)resultReceiver orResultHandler:(void (^)(DemoSetThermostatTempExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    NSString *_payload;
    Demo_setThermostatTemp_reqArg *_reqArg = [[Demo_setThermostatTemp_reqArg alloc] init];
    SetThermostatTempInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [SetThermostatTempInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setTemp:temp];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"setThermostatTemp.Demo" andResponseHandler:_iRspHndlr];

}

//
// setThermostatTemp using closure
//
// + (void)sendSetThermostatTempUsingResultHandler:(void (^)(DemoSetThermostatTempExceptionBundle *))resultHandler andDestination:(NSString *)_dst withTemp:(Temp *)temp

+ (void)registerSetThermostatTempRequestReceiver:(id<DemoSetThermostatTempRequestReceiver>)requestReceiver
{
    SetThermostatTempInternalRequestHandler *reqHandler;
    reqHandler = [SetThermostatTempInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setThermostatTemp.Demo"];
}

+ (void)registerSetThermostatTempRequestHandler:(void (^)(id<DemoSetThermostatTempResultSender> resultSender, Temp * temp))requestHandler;
{
    SetThermostatTempInternalRequestHandler *reqHandler;
    reqHandler = [SetThermostatTempInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"setThermostatTemp.Demo"];
}

//
// reportTemp
//
+ (void)sendReportTempUsingResultHandler:(void (^)(DemoReportTempExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    [self sendReportTempUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withTemp:temp];
}

+ (void)sendReportTempUsingResultHandler:(void (^)(DemoReportTempExceptionBundle *))resultHandler andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    [self sendReportTempUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withTemp:temp];
}

+ (void)sendReportTempUsingResultReceiver:(id<DemoReportTempResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    [self sendReportTempUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withTemp:temp];
}

+ (void)sendReportTempUsingResultReceiver:(id<DemoReportTempResultReceiver>)resultReceiver andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    [self sendReportTempUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withTemp:temp];
}

//
// reportTemp with transport options and receiver/handler
//
+ (void)sendReportTempUsingResultReceiver:(id<DemoReportTempResultReceiver>)resultReceiver orResultHandler:(void (^)(DemoReportTempExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTemp:(Temp *)temp
{
    NSString *_payload;
    Demo_reportTemp_reqArg *_reqArg = [[Demo_reportTemp_reqArg alloc] init];
    ReportTempInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [ReportTempInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setTemp:temp];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"reportTemp.Demo" andResponseHandler:_iRspHndlr];

}

//
// reportTemp using closure
//
// + (void)sendReportTempUsingResultHandler:(void (^)(DemoReportTempExceptionBundle *))resultHandler andDestination:(NSString *)_dst withTemp:(Temp *)temp

+ (void)registerReportTempRequestReceiver:(id<DemoReportTempRequestReceiver>)requestReceiver
{
    ReportTempInternalRequestHandler *reqHandler;
    reqHandler = [ReportTempInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"reportTemp.Demo"];
}

+ (void)registerReportTempRequestHandler:(void (^)(id<DemoReportTempResultSender> resultSender, Temp * temp))requestHandler;
{
    ReportTempInternalRequestHandler *reqHandler;
    reqHandler = [ReportTempInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"reportTemp.Demo"];
}

@end
