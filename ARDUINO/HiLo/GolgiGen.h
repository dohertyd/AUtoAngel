/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

#ifndef __GolgiGen_H__
#define __GolgiGen_H__

#include "libgolgi.h"


class LocationInfo{
public:
    LocationInfo(void);
    LocationInfo(bool isSetDefault);
    LocationInfo *dupe(void);
    virtual ~LocationInfo(void);

    bool isCorrupt(void);

    bool latIsSet(void);
    const char *getLat(void);
    void setLat(const char *val);

    bool lonIsSet(void);
    const char *getLon(void);
    void setLon(const char *val);

    bool timeIsSet(void);
    const char *getTime(void);
    void setTime(const char *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    const char *_lat;
    bool _latIsSet;

    const char *_lon;
    bool _lonIsSet;

    const char *_time;
    bool _timeIsSet;
};


class autoangel_crashInfo_reqArg{
public:
    autoangel_crashInfo_reqArg(void);
    autoangel_crashInfo_reqArg(bool isSetDefault);
    autoangel_crashInfo_reqArg *dupe(void);
    virtual ~autoangel_crashInfo_reqArg(void);

    bool isCorrupt(void);

    bool locationInfoIsSet(void);
    LocationInfo *getLocationInfo(void);
    void setLocationInfo(LocationInfo *val);

    bool crashTextIsSet(void);
    const char *getCrashText(void);
    void setCrashText(const char *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    LocationInfo *_locationInfo;
    bool _locationInfoIsSet;

    const char *_crashText;
    bool _crashTextIsSet;
};


class autoangel_crashInfo_rspArg{
public:
    autoangel_crashInfo_rspArg(void);
    autoangel_crashInfo_rspArg(bool isSetDefault);
    autoangel_crashInfo_rspArg *dupe(void);
    virtual ~autoangel_crashInfo_rspArg(void);

    bool isCorrupt(void);

    bool internalSuccess_IsSet(void);
    int32_t getInternalSuccess_(void);
    void setInternalSuccess_(int32_t val);

    bool golgiExceptionIsSet(void);
    GolgiException *getGolgiException(void);
    void setGolgiException(GolgiException *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    int32_t _internalSuccess_;
    bool _internalSuccess_IsSet;

    GolgiException *_golgiException;
    bool _golgiExceptionIsSet;
};

#if 1
class autoangelCrashInfoResultSender{
private:
    void sendResult(autoangel_crashInfo_rspArg *rspArg);
public:
    autoangelCrashInfoResultSender(GolgiResultSender *golgiResultSender);
    void success(void);
    const char *getSender(void);
    virtual ~autoangelCrashInfoResultSender();
private:
    GolgiResultSender *golgiResultSender;
};

class autoangelCrashInfoRequestReceiver{
public:
    virtual void inboundCrashInfo(autoangelCrashInfoResultSender *resultSender, autoangel_crashInfo_reqArg *arg) {};
};

class autoangelInternalCrashInfoRequestReceiver: public GolgiRequestReceiver{
public:
    autoangelInternalCrashInfoRequestReceiver(autoangelCrashInfoRequestReceiver *reqReceiver);
    void inboundRequest(GolgiResultSender *resultSender, const char *payload);
    virtual ~autoangelInternalCrashInfoRequestReceiver();
private:
    autoangelCrashInfoRequestReceiver *reqReceiver;
};

void autoangelRegisterCrashInfoRequestReceiver(autoangelCrashInfoRequestReceiver *requestReceiver);

#endif
class autoangelCrashInfoResultReceiver{
public:
    virtual void success(void) {};
    virtual void errorWithGolgiException(GolgiException *golgiException) {};
    virtual ~autoangelCrashInfoResultReceiver() {};
};

extern void autoangelCrashInfo_sendTo(autoangelCrashInfoResultReceiver *resReceiver, const char *dst, autoangel_crashInfo_reqArg *arg);

class Temp{
public:
    Temp(void);
    Temp(bool isSetDefault);
    Temp *dupe(void);
    virtual ~Temp(void);

    bool isCorrupt(void);

    bool valueIsSet(void);
    int32_t getValue(void);
    void setValue(int32_t val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    int32_t _value;
    bool _valueIsSet;
};


class Led{
public:
    Led(void);
    Led(bool isSetDefault);
    Led *dupe(void);
    virtual ~Led(void);

    bool isCorrupt(void);

    bool valueIsSet(void);
    int32_t getValue(void);
    void setValue(int32_t val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    int32_t _value;
    bool _valueIsSet;
};


class Demo_setLed_reqArg{
public:
    Demo_setLed_reqArg(void);
    Demo_setLed_reqArg(bool isSetDefault);
    Demo_setLed_reqArg *dupe(void);
    virtual ~Demo_setLed_reqArg(void);

    bool isCorrupt(void);

    bool ledIsSet(void);
    Led *getLed(void);
    void setLed(Led *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    Led *_led;
    bool _ledIsSet;
};


class Demo_setLed_rspArg{
public:
    Demo_setLed_rspArg(void);
    Demo_setLed_rspArg(bool isSetDefault);
    Demo_setLed_rspArg *dupe(void);
    virtual ~Demo_setLed_rspArg(void);

    bool isCorrupt(void);

    bool internalSuccess_IsSet(void);
    int32_t getInternalSuccess_(void);
    void setInternalSuccess_(int32_t val);

    bool golgiExceptionIsSet(void);
    GolgiException *getGolgiException(void);
    void setGolgiException(GolgiException *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    int32_t _internalSuccess_;
    bool _internalSuccess_IsSet;

    GolgiException *_golgiException;
    bool _golgiExceptionIsSet;
};


class Demo_setThermostatTemp_reqArg{
public:
    Demo_setThermostatTemp_reqArg(void);
    Demo_setThermostatTemp_reqArg(bool isSetDefault);
    Demo_setThermostatTemp_reqArg *dupe(void);
    virtual ~Demo_setThermostatTemp_reqArg(void);

    bool isCorrupt(void);

    bool tempIsSet(void);
    Temp *getTemp(void);
    void setTemp(Temp *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    Temp *_temp;
    bool _tempIsSet;
};


class Demo_setThermostatTemp_rspArg{
public:
    Demo_setThermostatTemp_rspArg(void);
    Demo_setThermostatTemp_rspArg(bool isSetDefault);
    Demo_setThermostatTemp_rspArg *dupe(void);
    virtual ~Demo_setThermostatTemp_rspArg(void);

    bool isCorrupt(void);

    bool internalSuccess_IsSet(void);
    int32_t getInternalSuccess_(void);
    void setInternalSuccess_(int32_t val);

    bool golgiExceptionIsSet(void);
    GolgiException *getGolgiException(void);
    void setGolgiException(GolgiException *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    int32_t _internalSuccess_;
    bool _internalSuccess_IsSet;

    GolgiException *_golgiException;
    bool _golgiExceptionIsSet;
};


class Demo_reportTemp_reqArg{
public:
    Demo_reportTemp_reqArg(void);
    Demo_reportTemp_reqArg(bool isSetDefault);
    Demo_reportTemp_reqArg *dupe(void);
    virtual ~Demo_reportTemp_reqArg(void);

    bool isCorrupt(void);

    bool tempIsSet(void);
    Temp *getTemp(void);
    void setTemp(Temp *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    Temp *_temp;
    bool _tempIsSet;
};


class Demo_reportTemp_rspArg{
public:
    Demo_reportTemp_rspArg(void);
    Demo_reportTemp_rspArg(bool isSetDefault);
    Demo_reportTemp_rspArg *dupe(void);
    virtual ~Demo_reportTemp_rspArg(void);

    bool isCorrupt(void);

    bool internalSuccess_IsSet(void);
    int32_t getInternalSuccess_(void);
    void setInternalSuccess_(int32_t val);

    bool golgiExceptionIsSet(void);
    GolgiException *getGolgiException(void);
    void setGolgiException(GolgiException *val);

    bool decodeFromPayload(const char *payload);
    const char *encode(void);
    const char *encodeWithPrefix(const char *prefix);

private:
    void initialise(bool isSetDefault);
    bool _corrupt;

    int32_t _internalSuccess_;
    bool _internalSuccess_IsSet;

    GolgiException *_golgiException;
    bool _golgiExceptionIsSet;
};

#if 1
class DemoSetLedResultSender{
private:
    void sendResult(Demo_setLed_rspArg *rspArg);
public:
    DemoSetLedResultSender(GolgiResultSender *golgiResultSender);
    void success(void);
    const char *getSender(void);
    virtual ~DemoSetLedResultSender();
private:
    GolgiResultSender *golgiResultSender;
};

class DemoSetLedRequestReceiver{
public:
    virtual void inboundSetLed(DemoSetLedResultSender *resultSender, Demo_setLed_reqArg *arg) {};
};

class DemoInternalSetLedRequestReceiver: public GolgiRequestReceiver{
public:
    DemoInternalSetLedRequestReceiver(DemoSetLedRequestReceiver *reqReceiver);
    void inboundRequest(GolgiResultSender *resultSender, const char *payload);
    virtual ~DemoInternalSetLedRequestReceiver();
private:
    DemoSetLedRequestReceiver *reqReceiver;
};

void DemoRegisterSetLedRequestReceiver(DemoSetLedRequestReceiver *requestReceiver);

#endif
class DemoSetLedResultReceiver{
public:
    virtual void success(void) {};
    virtual void errorWithGolgiException(GolgiException *golgiException) {};
    virtual ~DemoSetLedResultReceiver() {};
};

extern void DemoSetLed_sendTo(DemoSetLedResultReceiver *resReceiver, const char *dst, Demo_setLed_reqArg *arg);
#if 1
class DemoSetThermostatTempResultSender{
private:
    void sendResult(Demo_setThermostatTemp_rspArg *rspArg);
public:
    DemoSetThermostatTempResultSender(GolgiResultSender *golgiResultSender);
    void success(void);
    const char *getSender(void);
    virtual ~DemoSetThermostatTempResultSender();
private:
    GolgiResultSender *golgiResultSender;
};

class DemoSetThermostatTempRequestReceiver{
public:
    virtual void inboundSetThermostatTemp(DemoSetThermostatTempResultSender *resultSender, Demo_setThermostatTemp_reqArg *arg) {};
};

class DemoInternalSetThermostatTempRequestReceiver: public GolgiRequestReceiver{
public:
    DemoInternalSetThermostatTempRequestReceiver(DemoSetThermostatTempRequestReceiver *reqReceiver);
    void inboundRequest(GolgiResultSender *resultSender, const char *payload);
    virtual ~DemoInternalSetThermostatTempRequestReceiver();
private:
    DemoSetThermostatTempRequestReceiver *reqReceiver;
};

void DemoRegisterSetThermostatTempRequestReceiver(DemoSetThermostatTempRequestReceiver *requestReceiver);

#endif
class DemoSetThermostatTempResultReceiver{
public:
    virtual void success(void) {};
    virtual void errorWithGolgiException(GolgiException *golgiException) {};
    virtual ~DemoSetThermostatTempResultReceiver() {};
};

extern void DemoSetThermostatTemp_sendTo(DemoSetThermostatTempResultReceiver *resReceiver, const char *dst, Demo_setThermostatTemp_reqArg *arg);
#if 1
class DemoReportTempResultSender{
private:
    void sendResult(Demo_reportTemp_rspArg *rspArg);
public:
    DemoReportTempResultSender(GolgiResultSender *golgiResultSender);
    void success(void);
    const char *getSender(void);
    virtual ~DemoReportTempResultSender();
private:
    GolgiResultSender *golgiResultSender;
};

class DemoReportTempRequestReceiver{
public:
    virtual void inboundReportTemp(DemoReportTempResultSender *resultSender, Demo_reportTemp_reqArg *arg) {};
};

class DemoInternalReportTempRequestReceiver: public GolgiRequestReceiver{
public:
    DemoInternalReportTempRequestReceiver(DemoReportTempRequestReceiver *reqReceiver);
    void inboundRequest(GolgiResultSender *resultSender, const char *payload);
    virtual ~DemoInternalReportTempRequestReceiver();
private:
    DemoReportTempRequestReceiver *reqReceiver;
};

void DemoRegisterReportTempRequestReceiver(DemoReportTempRequestReceiver *requestReceiver);

#endif
class DemoReportTempResultReceiver{
public:
    virtual void success(void) {};
    virtual void errorWithGolgiException(GolgiException *golgiException) {};
    virtual ~DemoReportTempResultReceiver() {};
};

extern void DemoReportTemp_sendTo(DemoReportTempResultReceiver *resReceiver, const char *dst, Demo_reportTemp_reqArg *arg);
#endif
